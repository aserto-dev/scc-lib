// Code generated by MockGen. DO NOT EDIT.
// Source: gitlabintr.go
//
// Generated by this command:
//
//	mockgen -source=gitlabintr.go -destination=mock_gitlabintr.go -package=interactions --build_flags=--mod=mod
//

// Package interactions is a generated GoMock package.
package interactions

import (
	reflect "reflect"

	gitlab "github.com/xanzy/go-gitlab"
	gomock "go.uber.org/mock/gomock"
)

// MockGitlabIntr is a mock of GitlabIntr interface.
type MockGitlabIntr struct {
	ctrl     *gomock.Controller
	recorder *MockGitlabIntrMockRecorder
	isgomock struct{}
}

// MockGitlabIntrMockRecorder is the mock recorder for MockGitlabIntr.
type MockGitlabIntrMockRecorder struct {
	mock *MockGitlabIntr
}

// NewMockGitlabIntr creates a new mock instance.
func NewMockGitlabIntr(ctrl *gomock.Controller) *MockGitlabIntr {
	mock := &MockGitlabIntr{ctrl: ctrl}
	mock.recorder = &MockGitlabIntrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitlabIntr) EXPECT() *MockGitlabIntrMockRecorder {
	return m.recorder
}

// CreateCommit mocks base method.
func (m *MockGitlabIntr) CreateCommit(pid any, opt *gitlab.CreateCommitOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCommit", pid, opt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCommit indicates an expected call of CreateCommit.
func (mr *MockGitlabIntrMockRecorder) CreateCommit(pid, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCommit", reflect.TypeOf((*MockGitlabIntr)(nil).CreateCommit), pid, opt)
}

// CreateProject mocks base method.
func (m *MockGitlabIntr) CreateProject(opt *gitlab.CreateProjectOptions) (*gitlab.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", opt)
	ret0, _ := ret[0].(*gitlab.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockGitlabIntrMockRecorder) CreateProject(opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockGitlabIntr)(nil).CreateProject), opt)
}

// CreateProjectVariable mocks base method.
func (m *MockGitlabIntr) CreateProjectVariable(pid any, opt *gitlab.CreateProjectVariableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProjectVariable", pid, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProjectVariable indicates an expected call of CreateProjectVariable.
func (mr *MockGitlabIntrMockRecorder) CreateProjectVariable(pid, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProjectVariable", reflect.TypeOf((*MockGitlabIntr)(nil).CreateProjectVariable), pid, opt)
}

// CreateTag mocks base method.
func (m *MockGitlabIntr) CreateTag(pid any, opt *gitlab.CreateTagOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", pid, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockGitlabIntrMockRecorder) CreateTag(pid, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockGitlabIntr)(nil).CreateTag), pid, opt)
}

// CurrentUser mocks base method.
func (m *MockGitlabIntr) CurrentUser() (*gitlab.User, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentUser")
	ret0, _ := ret[0].(*gitlab.User)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CurrentUser indicates an expected call of CurrentUser.
func (mr *MockGitlabIntrMockRecorder) CurrentUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentUser", reflect.TypeOf((*MockGitlabIntr)(nil).CurrentUser))
}

// GetNamespace mocks base method.
func (m *MockGitlabIntr) GetNamespace(id any) (*gitlab.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", id)
	ret0, _ := ret[0].(*gitlab.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespace indicates an expected call of GetNamespace.
func (mr *MockGitlabIntrMockRecorder) GetNamespace(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockGitlabIntr)(nil).GetNamespace), id)
}

// GetProject mocks base method.
func (m *MockGitlabIntr) GetProject(pid any) (*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", pid)
	ret0, _ := ret[0].(*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProject indicates an expected call of GetProject.
func (mr *MockGitlabIntrMockRecorder) GetProject(pid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockGitlabIntr)(nil).GetProject), pid)
}

// GetProjectFile mocks base method.
func (m *MockGitlabIntr) GetProjectFile(pid any, fileName string, opt *gitlab.GetFileOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectFile", pid, fileName, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetProjectFile indicates an expected call of GetProjectFile.
func (mr *MockGitlabIntrMockRecorder) GetProjectFile(pid, fileName, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectFile", reflect.TypeOf((*MockGitlabIntr)(nil).GetProjectFile), pid, fileName, opt)
}

// GetProjectVariable mocks base method.
func (m *MockGitlabIntr) GetProjectVariable(pid any, key string) (*gitlab.ProjectVariable, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectVariable", pid, key)
	ret0, _ := ret[0].(*gitlab.ProjectVariable)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProjectVariable indicates an expected call of GetProjectVariable.
func (mr *MockGitlabIntrMockRecorder) GetProjectVariable(pid, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectVariable", reflect.TypeOf((*MockGitlabIntr)(nil).GetProjectVariable), pid, key)
}

// ListGroupProjects mocks base method.
func (m *MockGitlabIntr) ListGroupProjects(gid any, opt *gitlab.ListGroupProjectsOptions) ([]*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroupProjects", gid, opt)
	ret0, _ := ret[0].([]*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroupProjects indicates an expected call of ListGroupProjects.
func (mr *MockGitlabIntrMockRecorder) ListGroupProjects(gid, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroupProjects", reflect.TypeOf((*MockGitlabIntr)(nil).ListGroupProjects), gid, opt)
}

// ListGroups mocks base method.
func (m *MockGitlabIntr) ListGroups(opt *gitlab.ListGroupsOptions) ([]*gitlab.Group, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroups", opt)
	ret0, _ := ret[0].([]*gitlab.Group)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListGroups indicates an expected call of ListGroups.
func (mr *MockGitlabIntrMockRecorder) ListGroups(opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockGitlabIntr)(nil).ListGroups), opt)
}

// ListUserProjects mocks base method.
func (m *MockGitlabIntr) ListUserProjects(uid any, opt *gitlab.ListProjectsOptions) ([]*gitlab.Project, *gitlab.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserProjects", uid, opt)
	ret0, _ := ret[0].([]*gitlab.Project)
	ret1, _ := ret[1].(*gitlab.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListUserProjects indicates an expected call of ListUserProjects.
func (mr *MockGitlabIntrMockRecorder) ListUserProjects(uid, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserProjects", reflect.TypeOf((*MockGitlabIntr)(nil).ListUserProjects), uid, opt)
}

// ProtectRepositoryTags mocks base method.
func (m *MockGitlabIntr) ProtectRepositoryTags(pid any, opt *gitlab.ProtectRepositoryTagsOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtectRepositoryTags", pid, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProtectRepositoryTags indicates an expected call of ProtectRepositoryTags.
func (mr *MockGitlabIntrMockRecorder) ProtectRepositoryTags(pid, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtectRepositoryTags", reflect.TypeOf((*MockGitlabIntr)(nil).ProtectRepositoryTags), pid, opt)
}

// UpdateProjectVariable mocks base method.
func (m *MockGitlabIntr) UpdateProjectVariable(pid any, key string, opt *gitlab.UpdateProjectVariableOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProjectVariable", pid, key, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProjectVariable indicates an expected call of UpdateProjectVariable.
func (mr *MockGitlabIntrMockRecorder) UpdateProjectVariable(pid, key, opt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProjectVariable", reflect.TypeOf((*MockGitlabIntr)(nil).UpdateProjectVariable), pid, key, opt)
}
