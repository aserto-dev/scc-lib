// Code generated by MockGen. DO NOT EDIT.
// Source: githubintr.go
//
// Generated by this command:
//
//	mockgen -source=githubintr.go -destination=mock_githubintr.go -package=interactions --build_flags=--mod=mod
//

// Package interactions is a generated GoMock package.
package interactions

import (
	context "context"
	reflect "reflect"

	github "github.com/google/go-github/v66/github"
	gomock "go.uber.org/mock/gomock"
)

// MockGithubIntr is a mock of GithubIntr interface.
type MockGithubIntr struct {
	ctrl     *gomock.Controller
	recorder *MockGithubIntrMockRecorder
	isgomock struct{}
}

// MockGithubIntrMockRecorder is the mock recorder for MockGithubIntr.
type MockGithubIntrMockRecorder struct {
	mock *MockGithubIntr
}

// NewMockGithubIntr creates a new mock instance.
func NewMockGithubIntr(ctrl *gomock.Controller) *MockGithubIntr {
	mock := &MockGithubIntr{ctrl: ctrl}
	mock.recorder = &MockGithubIntrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubIntr) EXPECT() *MockGithubIntrMockRecorder {
	return m.recorder
}

// CreateFile mocks base method.
func (m *MockGithubIntr) CreateFile(ctx context.Context, owner, repo, path string, opts *github.RepositoryContentFileOptions) (*github.RepositoryContentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFile", ctx, owner, repo, path, opts)
	ret0, _ := ret[0].(*github.RepositoryContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFile indicates an expected call of CreateFile.
func (mr *MockGithubIntrMockRecorder) CreateFile(ctx, owner, repo, path, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFile", reflect.TypeOf((*MockGithubIntr)(nil).CreateFile), ctx, owner, repo, path, opts)
}

// CreateOrUpdateRepoSecret mocks base method.
func (m *MockGithubIntr) CreateOrUpdateRepoSecret(arg0 context.Context, arg1, arg2 string, arg3 *github.EncryptedSecret) (*github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateRepoSecret", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdateRepoSecret indicates an expected call of CreateOrUpdateRepoSecret.
func (mr *MockGithubIntrMockRecorder) CreateOrUpdateRepoSecret(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateRepoSecret", reflect.TypeOf((*MockGithubIntr)(nil).CreateOrUpdateRepoSecret), arg0, arg1, arg2, arg3)
}

// CreateRepo mocks base method.
func (m *MockGithubIntr) CreateRepo(arg0 context.Context, arg1 string, arg2 *github.Repository) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepo", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRepo indicates an expected call of CreateRepo.
func (mr *MockGithubIntrMockRecorder) CreateRepo(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepo", reflect.TypeOf((*MockGithubIntr)(nil).CreateRepo), arg0, arg1, arg2)
}

// CreateRepoRef mocks base method.
func (m *MockGithubIntr) CreateRepoRef(arg0 context.Context, arg1, arg2 string, arg3 *github.Reference) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepoRef", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateRepoRef indicates an expected call of CreateRepoRef.
func (mr *MockGithubIntrMockRecorder) CreateRepoRef(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepoRef", reflect.TypeOf((*MockGithubIntr)(nil).CreateRepoRef), arg0, arg1, arg2, arg3)
}

// CreateRepoTag mocks base method.
func (m *MockGithubIntr) CreateRepoTag(arg0 context.Context, arg1, arg2 string, arg3 *github.Tag) (*github.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRepoTag", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRepoTag indicates an expected call of CreateRepoTag.
func (mr *MockGithubIntrMockRecorder) CreateRepoTag(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRepoTag", reflect.TypeOf((*MockGithubIntr)(nil).CreateRepoTag), arg0, arg1, arg2, arg3)
}

// CreateWorkflowDispatchEventByFileName mocks base method.
func (m *MockGithubIntr) CreateWorkflowDispatchEventByFileName(arg0 context.Context, arg1, arg2, arg3 string, arg4 github.CreateWorkflowDispatchEventRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkflowDispatchEventByFileName", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateWorkflowDispatchEventByFileName indicates an expected call of CreateWorkflowDispatchEventByFileName.
func (mr *MockGithubIntrMockRecorder) CreateWorkflowDispatchEventByFileName(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkflowDispatchEventByFileName", reflect.TypeOf((*MockGithubIntr)(nil).CreateWorkflowDispatchEventByFileName), arg0, arg1, arg2, arg3, arg4)
}

// GetCommit mocks base method.
func (m *MockGithubIntr) GetCommit(ctx context.Context, owner, repo, sha string) (*github.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit", ctx, owner, repo, sha)
	ret0, _ := ret[0].(*github.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockGithubIntrMockRecorder) GetCommit(ctx, owner, repo, sha any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockGithubIntr)(nil).GetCommit), ctx, owner, repo, sha)
}

// GetRepo mocks base method.
func (m *MockGithubIntr) GetRepo(arg0 context.Context, arg1, arg2 string) (*github.Repository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepo", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.Repository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepo indicates an expected call of GetRepo.
func (mr *MockGithubIntrMockRecorder) GetRepo(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepo", reflect.TypeOf((*MockGithubIntr)(nil).GetRepo), arg0, arg1, arg2)
}

// GetRepoPublicKey mocks base method.
func (m *MockGithubIntr) GetRepoPublicKey(arg0 context.Context, arg1, arg2 string) (*github.PublicKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoPublicKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(*github.PublicKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepoPublicKey indicates an expected call of GetRepoPublicKey.
func (mr *MockGithubIntrMockRecorder) GetRepoPublicKey(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoPublicKey", reflect.TypeOf((*MockGithubIntr)(nil).GetRepoPublicKey), arg0, arg1, arg2)
}

// GetRepoRef mocks base method.
func (m *MockGithubIntr) GetRepoRef(arg0 context.Context, arg1, arg2, arg3 string) (*github.Reference, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepoRef", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Reference)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetRepoRef indicates an expected call of GetRepoRef.
func (mr *MockGithubIntrMockRecorder) GetRepoRef(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepoRef", reflect.TypeOf((*MockGithubIntr)(nil).GetRepoRef), arg0, arg1, arg2, arg3)
}

// GetUsers mocks base method.
func (m *MockGithubIntr) GetUsers(arg0 context.Context, arg1 string) (*github.User, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", arg0, arg1)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockGithubIntrMockRecorder) GetUsers(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockGithubIntr)(nil).GetUsers), arg0, arg1)
}

// ListRepoSecrets mocks base method.
func (m *MockGithubIntr) ListRepoSecrets(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) (*github.Secrets, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepoSecrets", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.Secrets)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepoSecrets indicates an expected call of ListRepoSecrets.
func (mr *MockGithubIntrMockRecorder) ListRepoSecrets(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepoSecrets", reflect.TypeOf((*MockGithubIntr)(nil).ListRepoSecrets), arg0, arg1, arg2, arg3)
}

// ListRepoTags mocks base method.
func (m *MockGithubIntr) ListRepoTags(arg0 context.Context, arg1, arg2 string, arg3 *github.ListOptions) ([]*github.RepositoryTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepoTags", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*github.RepositoryTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepoTags indicates an expected call of ListRepoTags.
func (mr *MockGithubIntrMockRecorder) ListRepoTags(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepoTags", reflect.TypeOf((*MockGithubIntr)(nil).ListRepoTags), arg0, arg1, arg2, arg3)
}

// ListRepositoryWorkflowRuns mocks base method.
func (m *MockGithubIntr) ListRepositoryWorkflowRuns(arg0 context.Context, arg1, arg2 string, arg3 *github.ListWorkflowRunsOptions) (*github.WorkflowRuns, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositoryWorkflowRuns", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*github.WorkflowRuns)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositoryWorkflowRuns indicates an expected call of ListRepositoryWorkflowRuns.
func (mr *MockGithubIntrMockRecorder) ListRepositoryWorkflowRuns(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositoryWorkflowRuns", reflect.TypeOf((*MockGithubIntr)(nil).ListRepositoryWorkflowRuns), arg0, arg1, arg2, arg3)
}
