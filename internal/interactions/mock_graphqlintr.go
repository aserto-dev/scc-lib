// Code generated by MockGen. DO NOT EDIT.
// Source: graphqlintr.go
//
// Generated by this command:
//
//	mockgen -source=graphqlintr.go -destination=mock_graphqlintr.go -package=interactions --build_flags=--mod=mod
//

// Package interactions is a generated GoMock package.
package interactions

import (
	context "context"
	reflect "reflect"

	githubv4 "github.com/shurcooL/githubv4"
	gomock "go.uber.org/mock/gomock"
)

// MockGraphqlIntr is a mock of GraphqlIntr interface.
type MockGraphqlIntr struct {
	ctrl     *gomock.Controller
	recorder *MockGraphqlIntrMockRecorder
	isgomock struct{}
}

// MockGraphqlIntrMockRecorder is the mock recorder for MockGraphqlIntr.
type MockGraphqlIntrMockRecorder struct {
	mock *MockGraphqlIntr
}

// NewMockGraphqlIntr creates a new mock instance.
func NewMockGraphqlIntr(ctrl *gomock.Controller) *MockGraphqlIntr {
	mock := &MockGraphqlIntr{ctrl: ctrl}
	mock.recorder = &MockGraphqlIntrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGraphqlIntr) EXPECT() *MockGraphqlIntrMockRecorder {
	return m.recorder
}

// Mutate mocks base method.
func (m *MockGraphqlIntr) Mutate(arg0 context.Context, arg1 any, arg2 githubv4.Input, arg3 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mutate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mutate indicates an expected call of Mutate.
func (mr *MockGraphqlIntrMockRecorder) Mutate(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mutate", reflect.TypeOf((*MockGraphqlIntr)(nil).Mutate), arg0, arg1, arg2, arg3)
}

// Query mocks base method.
func (m *MockGraphqlIntr) Query(arg0 context.Context, arg1 any, arg2 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockGraphqlIntrMockRecorder) Query(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockGraphqlIntr)(nil).Query), arg0, arg1, arg2)
}
